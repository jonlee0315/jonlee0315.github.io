---
layout:     post
title:      "设计模式学习笔记"
subtitle:   "设计模式分类、六大原则、UML"
date:       2018-05-02
author:     "Jon Lee"
header-img: "img/in-post/design-pattern/bg_0.jpg"
catalog: true
categories : 设计模式
tags:
    - Java
    - 设计模式
---

# 概述

>在软件工程中，设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。

>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。面向对象设计模式通常以类别或对象来描述其中的关系和相互作用，但不涉及用来完成应用程序的特定类别或对象。设计模式能使不稳定依赖于相对稳定、具体依赖于相对抽象，避免会引起麻烦的紧耦合，以增强软件设计面对并适应变化的能力。

>Eric Gamma、Richard Helm、Ralph Johnson、John Vlissides等四人将设计模式整理并进行了总结，这四个人被称为“the Gang of Four”，简称 **GoF**。  
GoF总结出了23种设计模式，并为它们起了名字，并且编写了一本书就是《设计模式：可复用面向对象软件的基础》。

# 分类

《设计模式》一书原先把设计模式分为 **创建型模式**、**结构型模式**、**行为型模式**。

#### 创建型模式

* **Abstract Factory，抽象工厂模式**

    为一个产品族提供了统一的创建接口。当需要这个产品族的某一系列的时候，可以从抽象工厂中选出相应的系列创建一个具体的工厂类。

* **Factory Method，工厂方法模式**  

    定义一个接口用于创建对象，但是让子类决定初始化哪个类。工厂方法把一个类的初始化下放到子类。

* **Builder，生成器模式**  

    将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

* **Prototype，原型模式**  

    用原型实例指定创建对象的种类，并且通过拷贝这些原型,创建新的对象。

* **Singleton，单例模式**  

    确保一个类只有一个实例，并提供对该实例的全局访问。

#### 结构型模式

* **Adapter，适配器模式**  

    将某个类的接口转换成客户端期望的另一个接口表示。适配器模式可以消除由于接口不匹配所造成的类兼容性问题。

* **Bridge，桥接模式**  

    将一个抽象与实现解耦，以便两者可以独立的变化。

* **Composite，组合模式**

    把多个对象组成树状结构来表示局部与整体，这样用户可以一样的对待单个对象和对象的组合。

* **Decorator，装饰器模式**

    向某个对象动态地添加更多的功能。修饰模式是除类继承外另一种扩展功能的方法。
* **Facade，外观模式**

    为子系统中的一组接口提供一个一致的界面， 外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

* **Flyweight，享元模式**

    通过共享以便有效的支持大量小颗粒对象。

* **Proxy，代理模式** 为其他对象提供一个代理以控制对这个对象的访问。

#### 行为型模式

* **Chain of Responsibility，责任链模式**  

    为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。

* **Command，命令模式**  

    将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。

* **Interpreter，解释器模式**

    给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。

* **Iterator，迭代器模式**  
    提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示。

* **Mediator，中介者模式**  

    包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用，从而使它们可以松散偶合。当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用，保证这些作用可以彼此独立的变化。

* **Memento，备忘录模式**  

    备忘录对象是一个用来存储另外一个对象内部状态的快照的对象。备忘录模式的用意是在不破坏封装的条件下，将一个对象的状态捉住，并外部化，存储起来，从而可以在将来合适的时候把这个对象还原到存储起来的状态。

* **Observer，观察者模式**  

    在对象间定义一个一对多的联系性，由此当一个对象改变了状态，所有其他相关的对象会被通知并且自动刷新。

* **State，状态模式**  

    让一个对象在其内部状态改变的时候，其行为也随之改变。状态模式需要对每一个系统可能获取的状态创立一个状态类的子类。当系统的状态变化时，系统便改变所选的子类。

* **Strategy，策略模式**

    定义一个算法的系列，将其各个分装，并且使他们有交互性。策略模式使得算法在用户使用的时候能独立的改变。

* **Template Method**

    模板方法模式，模板方法模式准备一个抽象类，将部分逻辑以具体方法及具体构造子类的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先构建一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。

* **Visitor，访问者模式**  

    封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改，接受这个操作的数据结构可以保持不变。访问者模式适用于数据结构相对未定的系统，它把数据结构和作用于结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。

# 六大原则

设计模式六大原则：

1. **单一职责原则**  
单一职责原则(Single Responsibility Principle, SRP)：一个类只负责一个功能领域中的相应职责，或者可以定义为：就一个类而言，应该只有一个引起它变化的原因。

2. **开闭原则**  
开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。

3. **里氏代换原则**  
里氏代换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能透明地使用其子类的对象。

4. **依赖倒置原则**  
依赖倒转原则(Dependency Inversion  Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。

5. **接口隔离原则**  
接口隔离原则(Interface  Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。

6. **迪米特法则**  
迪米特法则(Law of  Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。

# 参考资料

>https://zh.wikipedia.org/wiki/设计模式_(计算机)  
http://www.cnblogs.com/dolphin0520/p/3919839.html  
《图解设计模式》
